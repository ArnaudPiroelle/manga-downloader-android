apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion buildConfig.compileSdk

    defaultConfig {
        applicationId "com.arnaudpiroelle.manga"

        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk

        versionCode 20
        versionName "2.0.0"

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        buildConfigField 'String', 'JAPSCAN_BASE_URL', '"http://www.japscan.cc"'
        buildConfigField 'String', 'JAPSCAN_CDN_BASE_URL', '"http://ccc.blue15cdn.net/"'

        buildConfigField 'String', 'MANGAPANDA_BASE_URL', '"http://www.mangapanda.com"'
        buildConfigField 'String', 'MANGAPANDA_CDN_BASE_URL', '"http://i10.mangacdn.com"'
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            storeFile file('manga-downloader.keystore')
            storePassword propOrDef("APP_KEYSTORE_PASSWORD", "manga-downloader")
            keyAlias 'manga-downloader'
            keyPassword propOrDef("APP_KEYSTORE_PASSWORD", "manga-downloader")
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled = true

            signingConfig signingConfigs.release
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            ext.betaDistributionGroupAliases = "release"

            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

dependencies {
    api project(':provider-japscan')

    implementation "androidx.appcompat:appcompat:${versions.androidx.appcompat}"
    implementation "androidx.preference:preference:${versions.androidx.preference}"
    implementation "com.google.android.material:material:${versions.material_design}"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"

    implementation 'com.github.codekidX:storage-chooser:2.0.3'

    implementation 'com.github.stephanenicolas.toothpick:toothpick-runtime:1.1.3'
    kapt 'com.github.stephanenicolas.toothpick:toothpick-compiler:1.1.3'

    implementation "android.arch.persistence.room:runtime:1.1.1"
    implementation "android.arch.persistence.room:rxjava2:1.1.1"
    kapt "android.arch.persistence.room:compiler:1.1.1"

    implementation "io.reactivex.rxjava2:rxjava:${versions.rx}"
    implementation "io.reactivex.rxjava2:rxandroid:${versions.rxandroid}"

    implementation('com.crashlytics.sdk.android:crashlytics:2.4.0@aar') {
        transitive = true
    }

    implementation("com.github.hotchemi:permissionsdispatcher:4.0.0-alpha1") {
        exclude module: "support-v13"
    }
    kapt "com.github.hotchemi:permissionsdispatcher-processor:4.0.0-alpha1"

    testImplementation 'junit:junit:4.12'
    testImplementation "org.robolectric:robolectric:3.8"

}

String propOrDef(String propertyName, String defaultValue) {
    return hasProperty(propertyName) ? property(propertyName) : defaultValue
}