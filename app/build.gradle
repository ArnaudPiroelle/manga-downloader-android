apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'

def getBuildNumber() {
    return System.getenv("CIRCLE_BUILD_NUM") as Integer ?: 0
}

def getKeystorePassword(){
    return System.getenv("APP_KEYSTORE_PASSWORD") as String ?: "PASSWORD"
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.arnaudpiroelle.manga"
        minSdkVersion 21
        targetSdkVersion 22
        versionCode getBuildNumber()
        versionName "1.1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            storeFile file('manga-downloader.keystore')
            storePassword "${getKeystorePassword()}"
            keyAlias 'manga-downloader'
            keyPassword "${getKeystorePassword()}"
        }
    }

    productFlavors {
        mock {
            buildConfigField 'String', 'JAPSCAN_BASE_URL', '"http://192.168.60.1:8989/japscan"'
            buildConfigField 'String', 'JAPSCAN_CDN_BASE_URL', '"http://192.168.60.1:8989/japscan"'

            buildConfigField 'String', 'MANGAPANDA_BASE_URL', '"http://192.168.60.1:8989/mangapanda"'
            buildConfigField 'String', 'MANGAPANDA_CDN_BASE_URL', '"http://192.168.60.1:8989/mangapanda"'
        }

        real {
            buildConfigField 'String', 'JAPSCAN_BASE_URL', '"http://www.japscan.com"'
            buildConfigField 'String', 'JAPSCAN_CDN_BASE_URL', '"http://cdn.japscan.com"'

            buildConfigField 'String', 'MANGAPANDA_BASE_URL', '"http://www.mangapanda.com"'
            buildConfigField 'String', 'MANGAPANDA_CDN_BASE_URL', '"http://i10.mangacdn.com"'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            ext.betaDistributionGroupAliases = "release"

            signingConfig signingConfigs.release
        }
    }


}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:design:22.2.1'

    compile('com.squareup.retrofit:retrofit:1.9.0',
            'com.squareup.okhttp:okhttp-urlconnection:2.2.0',
            'com.squareup.okhttp:okhttp:2.2.0')

    compile 'com.google.dagger:dagger:2.0'
    apt 'com.google.dagger:dagger-compiler:2.0'
    provided 'org.glassfish:javax.annotation:10.0-b28'

    compile 'se.emilsjolander:sprinkles:1.3.1'

    compile 'com.jakewharton:butterknife:7.0.1'

    compile 'io.reactivex:rxandroid:0.25.0'
    compile 'de.greenrobot:eventbus:2.4.0'

    compile "com.daimajia.swipelayout:library:1.2.0@aar"
    compile('com.crashlytics.sdk.android:crashlytics:2.4.0@aar') {
        transitive = true;
    }

    testCompile(
            'junit:junit:4.12',
            'com.android.support:support-annotations:22.2.1',
            'com.squareup.assertj:assertj-android:1.0.0',
            'org.mockito:mockito-core:1.9.5',
            'org.assertj:assertj-core:1.7.0'
    )

    testCompile('org.robolectric:robolectric:3.0') {
        exclude group: 'commons-logging'
        exclude group: 'org.apache.httpcomponents'
    }
}
