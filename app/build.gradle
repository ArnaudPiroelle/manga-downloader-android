apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "com.arnaudpiroelle.manga"
        minSdkVersion 24
        targetSdkVersion 27
        versionCode 20
        versionName "2.0.0"

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        buildConfigField 'String', 'JAPSCAN_BASE_URL', '"http://www.japscan.cc"'
        buildConfigField 'String', 'JAPSCAN_CDN_BASE_URL', '"http://ccc.blue15cdn.net/"'

        buildConfigField 'String', 'MANGAPANDA_BASE_URL', '"http://www.mangapanda.com"'
        buildConfigField 'String', 'MANGAPANDA_CDN_BASE_URL', '"http://i10.mangacdn.com"'
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            storeFile file('manga-downloader.keystore')
            storePassword propOrDef("APP_KEYSTORE_PASSWORD", "manga-downloader")
            keyAlias 'manga-downloader'
            keyPassword propOrDef("APP_KEYSTORE_PASSWORD", "manga-downloader")
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled = true

            signingConfig signingConfigs.release
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            ext.betaDistributionGroupAliases = "release"

            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

dependencies {
    implementation 'com.android.support:support-annotations:27.1.1'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:preference-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    implementation 'com.github.codekidX:storage-chooser:2.0.3'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'
    implementation 'com.google.dagger:dagger:2.15'

    implementation 'org.jsoup:jsoup:1.11.3'

    implementation "android.arch.persistence.room:runtime:1.1.1"
    implementation "android.arch.persistence.room:rxjava2:1.1.1"
    kapt "android.arch.persistence.room:compiler:1.1.1"

    implementation "io.reactivex.rxjava2:rxjava:2.1.9"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.2"

    implementation('com.crashlytics.sdk.android:crashlytics:2.4.0@aar') {
        transitive = true
    }

    implementation("com.github.hotchemi:permissionsdispatcher:3.1.0") {
        exclude module: "support-v13"
    }
    kapt "com.github.hotchemi:permissionsdispatcher-processor:3.1.0"

    kapt 'com.google.dagger:dagger-compiler:2.15'

    testImplementation 'junit:junit:4.12'
    testImplementation "org.robolectric:robolectric:3.8"
}

kapt {
    generateStubs = true
}

String propOrDef(String propertyName, String defaultValue) {
    return hasProperty(propertyName) ? property(propertyName) : defaultValue
}